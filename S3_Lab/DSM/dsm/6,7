PROGRAM 6
AIM:- NAIVE BAYES ALGORITHM
Question 1:- Program to implement Naïve Bayes algorithm using any standard
dataset available in the public domain and find the accuracy of the
algorithm.
CODE 1
#naive bayes
import numpy as np
from sklearn import datasets,metrics
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
#load the iris dataset
iris=datasets.load_iris()
X=iris.data
y=iris.target
#split the data into training and testing sets(80% training,20% testing)
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)
#create a Gaussian Naive Bayes classifier
nb_classifier=GaussianNB()
#Train the classifier using the train data
nb_classifier.fit(X_train,y_train)
#make predictions on the testing data
y_pred=nb_classifier.predict(X_test)
#calculate the accuracy of the classifier
accuracy=accuracy_score(y_test,y_pred)
print(accuracy)
print(f"Accuracy: {accuracy*100:.2f}%")
CODE 2 :- Program to implement Naïve Bayes algorithm with confusion matrix
using any standard dataset available in the public domain and find the
accuracy of the algorithm.
#naive bayes
import numpy as np
from sklearn import datasets,metrics
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import
accuracy_score,confusion_matrix,classification_report
#load the iris dataset
iris=datasets.load_iris()
X=iris.data
y=iris.target
#split the data into training and testing sets(80% training,20% testing)
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=4
2)
#create a Gaussian Naive Bayes classifier
nb_classifier=GaussianNB()
#Train the classifier using the train data
nb_classifier.fit(X_train,y_train)
#make predictions on the testing data
y_pred=nb_classifier.predict(X_test)
#consusion matrix
res=confusion_matrix(y_test,y_pred)
print("confusion_matrix \n",res)
#classification report
res1=classification_report(y_test,y_pred)
print("Classification_report \n",res1)
#calculate the accuracy of the classifier
accuracy=accuracy_score(y_test,y_pred)
print("Accuracy:\n",accuracy)
# print(f"Accuracy: {accuracy*100:.2f}%")
For reference
import numpy as np
import pandas as pd
# from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder
data = pd.read_csv('food.csv')
X = data.iloc[:, :3]
# print(X)
y= data.iloc[:, 3]
le = LabelEncoder()
categorical_columns = ['Ingredient']
for col in categorical_columns:
X[col] = le.fit_transform(X[col])
y = le.fit_transform(y)
X_train,X_test,y_train,y_test =
train_test_split(X,y,test_size=0.2,random_state=42)
knn = GaussianNB()
knn.fit(X_train,y_train)
y_pred = knn.predict(X_test)
sample=[[1,10,9]]
k=knn.predict(sample)
print(k)
accuracy = accuracy_score(y_test,y_pred)
print(accuracy


PROGRAM 7
AIM:-LINEAR AND MULTIPLE REGRESSION
QUESTION 1:- Program to implement linear regression technique using any
standard dataset available in the public domain and evaluate its
performance.
2. Program to implement multiple regression technique using any
standard dataset available in the public domain and evaluate its
performance.
CODE 1
import numpy as np
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
data = load_iris()
X=data.data
y=data.target
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)
#linear Regression
lr_model=LinearRegression()
lr_model.fit(X_train,y_train)
lr_predictions=lr_model.predict(X_test)
lr_mse=mean_squared_error(y_test,lr_predictions)
#print the Mean Squared Error(MSE) for Linear Regression
print(f'Linear Regression MSE: {lr_mse}')
code 2
import numpy as np
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
data = load_iris()
X=data.data[:,0].reshape(-1,1)
y=data.target
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)
#Multiple linear Regression
mlr_model=LinearRegression()
mlr_model.fit(X_train,y_train)
mlr_predictions=mlr_model.predict(X_test)
mlr_mse=mean_squared_error(y_test,mlr_predictions)
#print the Mean Squared Error(MSE) for Linear Regression
print(f'Multiple Linear Regression MSE: {mlr_mse}')
for reference only
import numpy as np
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder
data = pd.read_csv('food.csv')
X = data.iloc[:, :3]
# print(X)
y= data.iloc[:, 3]
le = LabelEncoder()
categorical_columns = ['Ingredient']
for col in categorical_columns:
X[col] = le.fit_transform(X[col])
y = le.fit_transform(y)
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)
#Multiple linear Regression
mlr_model=LinearRegression()
mlr_model.fit(X_train,y_train)
mlr_predictions=mlr_model.predict(X_test)
mlr_mse=mean_squared_error(y_test,mlr_predictions)
#print the Mean Squared Error(MSE) for Linear Regression
print(f'Multiple Linear Regression MSE: {mlr_mse}'