PROGRAM 4
AIM:-Programs to handle data using pandas.
Question 1:- Write a program to implement list to series conversion.
2. Write a python program to generate the series of dates from 20th
November 2024 to 24th November 2024(both inclusive).
3. Given a 2D list convert it in to corresponding data frame and display it.
4. Create a dictionary and convert it in to corresponding data frame .
5. Display the head and tail of the dataâ€™s.
6. Write python program that given a data frame select find two rows and
display.
7. Given a data frame with nan values replace the nan value with 0.
CODE 1
#Pandas Series from a list
import pandas as pd
a = [1, 7, 2]
myvar = pd.Series(a)
print(myvar)
code 2
import pandas as pd
# Date range
date_series = pd.date_range(start='2024-11-20', end='2024-11-24')
print("Date Series:")
for date in date_series:
print(date)
CODE 3
import pandas as pd
# 2D List
data = [[101, 'A', 23],
[102, 'B', 25],
[103, 'C', 22]]
# Convert to DataFrame
df = pd.DataFrame(data, columns=['ID', 'Name', 'Age'])
print("2D List to DataFrame:")
print(df)
CODE 4
#DataFrames
import pandas as pd
data = {
"calories": [420, 380, 390],
"duration": [50, 40, 45]
}
#load data into a DataFrame object:
df = pd.DataFrame(data)
print(df)
CODE 5
import pandas as pd
# Sample DataFrame
df = pd.DataFrame({
'Roll': [1, 2, 3, 4, 5, 6, 7],
'Name': ['A', 'B', 'C', 'D', 'E', 'F', 'G'],
'Marks': [78, 82, 90, 65, 85, 92, 70]
})
print("Head of the DataFrame:")
print(df.head())
print("\nTail of the DataFrame:")
print(df.tail())
CODE 7
import pandas as pd
# Sample DataFrame
df = pd.DataFrame({
'ID': [1, 2, 3, 4],
'Name': ['A', 'B', 'C', 'D'],
'Age': [20, 21, 19, 22]
})
# Select 2 rows by index
selected_rows = df.iloc[[1, 3]] # selecting 2nd and 4th rows
print("Selected Rows:")
print(selected_rows)
code 6
import pandas as pd
import numpy as np
# Create DataFrame with NaN values
df = pd.DataFrame({
'A': [10, np.nan, 30],
'B': [np.nan, 50, 60]
})
print("Original DataFrame with NaN:")
print(df)
# Replace NaN with 0
df_filled = df.fillna(0)
print("\nDataFrame after Replacing NaN with 0:")
print(df_filled


PROGRAM 5
AIM:-K-NN CLASSIFICATION
Question 1:- Program to implement k-NN classification using any standard dataset
available in the public domain and find the accuracy of the algorithm.
Code1
import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
# df=pd.read_csv ('data.csv')
data = load_iris()
X = data.data
y= data.target
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)
# k=3
knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(X_train,y_train)
y_pred = knn.predict(X_test)
accuracy = accuracy_score(y_test,y_pred)
print(f'Accuracy of k-NN with k={k}:{accuracy:.2f}')
not for record for reference
#Load the breast cancer dataset
import numpy as np
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import LabelEncoder
#Load the breast cancer dataset
data=load_breast_cancer()
X=data.data #Features
y=data.target #Target(labels)
#Split the dataset into training and testing sets
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)
#Initialize the k-NN classifier with a specified value of k
k=3 #You can change this value as needed
knn=KNeighborsClassifier(n_neighbors=k)
#Fit the model on the training data
knn.fit(X_train,y_train)
#Make predictions on the test data
y_pred=knn.predict(X_test)
#Calculate the accuracy of the model
accuracy=accuracy_score(y_test,y_pred)
print(f'Accuracy of k-NN with k={k}:{accuracy:.2f}')
#load foo csv
import numpy as np
import pandas as pd
# from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder
data = pd.read_csv('food.csv')
X = data.iloc[:, :3]
# print(X)
y= data.iloc[:, 3]
le = LabelEncoder()
categorical_columns = ['Ingredient']
for col in categorical_columns:
X[col] = le.fit_transform(X[col])
y = le.fit_transform(y)
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)
k=3
knn = KNeighborsClassifier(n_neighbors=k)
knn.fit(X_train,y_train)
y_pred = knn.predict(X_test)
sample=[[1,10,9]]
k=knn.predict(sample)
print(k)
accuracy = accuracy_score(y_test,y_pred)
print(accuracy)
#load insurance
import numpy as np
import pandas as pd
# from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
data = pd.read_csv('insurance.csv')
X = data.iloc[:, :6]
# print(X)
y= data.iloc[:, 1]
le = LabelEncoder()
categorical_columns = ['sex', 'smoker', 'region']
for col in categorical_columns:
X[col] = le.fit_transform(X[col])
y = le.fit_transform(y)
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)
k=3
knn = KNeighborsClassifier(n_neighbors=k)
knn.fit(X_train,y_train)
y_pred = knn.predict(X_test)
sample=[[1,10,9,11,4,2]]
k=knn.predict(sample)
print(k)
accuracy = accuracy_score(y_test,y_pred)
print(accuracy)
#cricket
import numpy as np
import pandas as pd
# from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder
data = pd.read_csv('cricket.csv')
X = data.iloc[:, :5]
# print(X)
y= data.iloc[:, 4]
# print(y)
le = LabelEncoder()
categorical_columns = ['Outlook','Temp','Humidity','Windy','Play Cricket']
for col in categorical_columns:
X[col] = le.fit_transform(X[col])
y = le.fit_transform(y)
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)
k=3
knn = KNeighborsClassifier(n_neighbors=k)
knn.fit(X_train,y_train)
y_pred = knn.predict(X_test)
sample=[[1,10,9,11,4]]
k=knn.predict(sample)
print(k)
accuracy = accuracy_score(y_test,y_pred)
print(accuracy